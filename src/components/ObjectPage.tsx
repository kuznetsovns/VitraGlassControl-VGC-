import { useState, useEffect } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { supabase } from '../lib/supabase'
import type { Department } from './Layout'
import type { ProjectObject } from './MainPage'
import './ObjectPage.css'

export default function ObjectPage() {
  const { id } = useParams<{ id: string }>()
  const navigate = useNavigate()
  const [object, setObject] = useState<ProjectObject | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    loadObject()
  }, [id])

  const loadObject = async () => {
    if (!id) return

    try {
      const { data, error } = await supabase
        .from('objects')
        .select('*')
        .eq('id', id)
        .single()

      if (error) {
        console.error('Error loading object:', error)
        navigate('/')
        return
      }

      if (data) {
        const projectObject: ProjectObject = {
          id: data.id,
          name: data.name,
          customer: data.customer || '',
          address: data.address || '',
          buildingsCount: data.corpus_count || 1,
          image: data.photo_url || undefined,
          createdAt: new Date(data.created_at),
          updatedAt: new Date(data.updated_at)
        }
        setObject(projectObject)
      }
    } catch (error) {
      console.error('Error loading object:', error)
      navigate('/')
    } finally {
      setLoading(false)
    }
  }

  const selectDepartment = (departmentName: string) => {
    if (!object) return

    // Map department name to Department type
    let department: Department = null
    switch (departmentName) {
      case '–û—Ç–¥–µ–ª –£–û–ö':
        department = '–£–û–ö'
        break
      case '–û—Ç–¥–µ–ª —Å–Ω–∞–±–∂–µ–Ω–∏—è':
        department = '–°–Ω–∞–±–∂–µ–Ω–∏–µ'
        break
      case '–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –æ—Ç–¥–µ–ª':
        department = '–ì–∞—Ä–∞–Ω—Ç–∏—è'
        break
    }

    if (department) {
      // Navigate to department with object context
      const section = department === '–£–û–ö' ? 'vitrage-visualizer' : 'order-form'
      navigate(`/object/${object.id}/department/${department}/${section}`)
    }
  }

  if (loading) {
    return (
      <div className="object-page loading">
        <div className="loader">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    )
  }

  if (!object) {
    return (
      <div className="object-page error">
        <h2>–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
        <button onClick={() => navigate('/')}>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</button>
      </div>
    )
  }

  return (
    <div className="object-page">
      {/* Back button */}
      <button className="back-button" onClick={() => navigate('/')}>
        ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤
      </button>

      {/* Object Info */}
      <div className="object-info-section">
        <div className="object-hero">
          {object.image ? (
            <div className="object-hero-image">
              <img src={object.image} alt={object.name} />
            </div>
          ) : (
            <div className="object-hero-placeholder">
              <span>üè¢</span>
            </div>
          )}
          <div className="object-hero-content">
            <h1 className="object-title">{object.name}</h1>
            <div className="object-meta">
              <div className="meta-item">
                <span className="meta-label">–ó–∞–∫–∞–∑—á–∏–∫:</span>
                <span className="meta-value">{object.customer}</span>
              </div>
              <div className="meta-item">
                <span className="meta-label">–ê–¥—Ä–µ—Å:</span>
                <span className="meta-value">{object.address}</span>
              </div>
              <div className="meta-item">
                <span className="meta-label">–ö–æ—Ä–ø—É—Å–æ–≤:</span>
                <span className="meta-value">{object.buildingsCount}</span>
              </div>
              <div className="meta-item">
                <span className="meta-label">–°–æ–∑–¥–∞–Ω:</span>
                <span className="meta-value">{object.createdAt.toLocaleDateString('ru-RU')}</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Department Selection */}
      <div className="department-selection-section">
        <h2 className="section-title">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã</h2>
        <div className="department-cards">
          <div
            className="department-card"
            onClick={() => selectDepartment('–û—Ç–¥–µ–ª —Å–Ω–∞–±–∂–µ–Ω–∏—è')}
          >
            <div className="department-card-icon">üì¶</div>
            <h3 className="department-card-title">–û—Ç–¥–µ–ª —Å–Ω–∞–±–∂–µ–Ω–∏—è</h3>
            <p className="department-card-description">
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            </p>
            <div className="department-card-arrow">‚Üí</div>
          </div>

          <div
            className="department-card"
            onClick={() => selectDepartment('–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –æ—Ç–¥–µ–ª')}
          >
            <div className="department-card-icon">üõ†Ô∏è</div>
            <h3 className="department-card-title">–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –æ—Ç–¥–µ–ª</h3>
            <p className="department-card-description">
              –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            </p>
            <div className="department-card-arrow">‚Üí</div>
          </div>

          <div
            className="department-card"
            onClick={() => selectDepartment('–û—Ç–¥–µ–ª –£–û–ö')}
          >
            <div className="department-card-icon">üìã</div>
            <h3 className="department-card-title">–û—Ç–¥–µ–ª –£–û–ö</h3>
            <p className="department-card-description">
              –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            </p>
            <div className="department-card-arrow">‚Üí</div>
          </div>
        </div>
      </div>
    </div>
  )
}